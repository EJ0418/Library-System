import MySQLdb
from tkinter import *
db = MySQLdb.connect("localhost", "EJ", "********", "Library")

class Start():

    def __init__(self):
        
        self.origin_platform = Tk(className = 'EJs Library')

        lable_title = Label(self.origin_platform,
                       text = '歡迎來到EJ的圖書館！',
                       height = 2,
                       bg = '#99CCFF')
        lable_title.pack(side = TOP,
                    fill='x',
                    expand=True)

        lable_asking = Label(self.origin_platform,
                       text = '請選擇登入身分：',
                       height = 1,
                       bg = '#FFFFFF')
        lable_asking.pack(side = TOP,
                    fill='x',
                    expand=True)

        user_button = Button(self.origin_platform,
                            text = '使用者',
                            height = 5,
                            bg = '#CCCCFF',
                            fg = '#000000',
                            activebackground = '#FFFFFF',
                            activeforeground = '#000000',
                            command = self.users)
        user_button.pack(side = 'top',
                         fill='both',
                         expand=True)

        lib_button = Button(self.origin_platform,
                            text = '圖書館管理員',
                            height = 5,
                            bg = '#CCCCFF',
                            fg = '#000000',
                            activebackground = '#FFFFFF',
                            activeforeground = '#000000',
                            command = self.librarian)
        lib_button.pack(fill='both',
                        expand=True)

        sys_button = Button(self.origin_platform,
                            text = '系統管理員',
                            height = 1,
                            bg = '#CCCCCC',
                            fg = '#000000',
                            activebackground = '#FFFFFF',
                            activeforeground = '#000000',
                           command = self.system)
        sys_button.pack(fill='x',
                         expand=True)

        self.origin_platform.mainloop()
    
    def users(self):
        self.origin_platform.destroy()
        call = Users()
        
    def librarian(self):
        self.origin_platform.destroy()
        call = Librarian()
        
    def system(self):
        self.origin_platform.destroy()
        call = System()

        
class Users():

    def __init__(self):
        
        self.platform = Tk(className = '登入')

        login_label = Label(self.platform, text = '電話號碼登入：', height = 1)
        login_label.pack(side = LEFT, fill='x', expand=True)

        self.phonenum = Entry(self.platform, width = 20)
        self.phonenum.pack(side = LEFT)

        login_button = Button(self.platform,
                             text = '登入',
                             width = 10,
                             height = 1,
                             bg = '#99CCFF',
                             fg = '#000000',
                             activebackground = '#FFFFFF',
                             activeforeground = '#000000',
                             command = self.login)
        login_button.pack(side = LEFT)

        signup_button = Button(self.platform,
                        text = '註冊會員',
                        width = 10,
                        height = 1,
                        fg = '#000000',
                        activebackground = '#FFFFFF',
                        activeforeground = '#000000',
                        command = self.signup_platform)
        signup_button.pack(side = LEFT)

        self.platform.mainloop() 
        
    def signup_platform(self):
        
        self.signup_platform = Tk(className = '註冊帳號')

        add_username_label = Label(self.signup_platform, text = '姓名：', height = 1)
        add_username_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_username = Entry(self.signup_platform, width = 20)
        self.add_username.pack(side = LEFT)

        add_gender_label = Label(self.signup_platform, text = '性別(F/M)：', height = 1)
        add_gender_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_gender = Entry(self.signup_platform, width = 20)
        self.add_gender.pack(side = LEFT)

        add_age_label = Label(self.signup_platform, text = '年齡：', height = 1)
        add_age_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_age = Entry(self.signup_platform, width = 20)
        self.add_age.pack(side = LEFT)

        add_phone_label = Label(self.signup_platform, text = '電話：', height = 1)
        add_phone_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_phone = Entry(self.signup_platform, width = 20)
        self.add_phone.pack(side = LEFT)

        signup_button = Button(self.signup_platform,
                              text = '註冊',
                              width = 10,
                              height = 1,
                              bg = '#99CCFF',
                              fg = '#000000',
                              activebackground = '#FFFFFF',
                              activeforeground = '#000000',
                              command = self.create_user)
        signup_button.pack(side = LEFT)

        self.signup_platform.mainloop()
        
    def create_user(self):
        cursor = db.cursor()
        try:
            user_name = self.add_username.get()
            age = self.add_age.get()
            gender = self.add_gender.get()
            phone = self.add_phone.get()
            add_user = """INSERT INTO USER 
                            (NAME, AGE, GENDER, PHONE)
                            VALUE (%s, %s, %s, %s)"""
            user_data = (user_name, age, gender, phone)
            cursor.execute(add_user, user_data) 
            db.commit()
            
            cursor.execute(f'''CREATE TABLE {user_name}(
                                ISBN CHAR(20) NOT NULL PRIMARY KEY,
                                BOOK CHAR(20) NOT NULL
                                )DEFAULT CHARSET = utf8''')
            db.commit()
        except Exception as e:
            db.rollback()
            print("註冊錯誤：", e)
        finally:
            self.signup_platform.destroy()
            cursor.close()
            
    def login(self):
        cursor = db.cursor()
        try:
            phone = self.phonenum.get()
            
            cursor.execute(f'''SELECT NAME FROM USER WHERE PHONE = '{phone}' ''')
            db.commit()
            result = cursor.fetchone()
            if result:
                name = result[0]
            else:
                print("找不到使用者")
                
            ###########cursor.execute(f'''SELECT * FROM {name}''')
        except Exception as e:
            db.rollback()
            print("登入錯誤：", e)
        finally:
            cursor.close()
            self.user_platform()
            
    def user_platform(self):
        self.platform.destroy()
        self.user_platform = Tk(className = '個人書庫')
        
        search_label = Label(self.user_platform, text = '書名搜尋：', height = 1)
        search_label.grid(row = 0, column = 0)
        
        self.book_name = Entry(self.user_platform)
        self.book_name.grid(row = 0, column = 1)
        
        search_button = Button(self.user_platform, 
                                text = '搜尋',
                                width = 10,
                                height = 1,
                                bg = '#99CCFF',
                                fg = '#000000',
                                activebackground = '#FFFFFF',
                                activeforeground = '#000000',
                                command = self.search_book)
        search_button.grid(row = 0, column = 2)
        
        self.user_platform.mainloop()
        
    def search_book(self):
        self.book = self.book_name.get()
        cursor = db.cursor()
        try:
            cursor.execute(f"""SELECT * FROM BOOK WHERE BOOK_NAME = '{self.book}'""")
            db.commit()
            search_result = cursor.fetchone()
        except Exception as e:
            db.rollback()
            print("錯誤：", e)
        finally:
            cursor.close()
        
        lable_content = ('ISBN：{}', '書名：{}', '作者：{}', '譯者：{}', '出版社：{}')
        
        label_texts = [
            'ISBN：{}'.format(search_result[0]),
            '書名：{}'.format(search_result[1]),
            '作者：{}'.format(search_result[2]),
            '譯者：{}'.format(search_result[3]),
            '出版社：{}'.format(search_result[4])
                ]

        for i, text in enumerate(label_texts):
            label = Label(self.user_platform, text=text, height=1)
            label.grid(row=i + 1, column=1)    
        
        self.book_name.delete(0, END)

        
            
class Librarian():
    
    def __init__(self):

        self.platform = Tk(className = '新增書籍')

        add_isbn_label = Label(self.platform, text = 'ISBN編碼：', height = 1)
        add_isbn_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_isbn = Entry(self.platform, width = 20)
        self.add_isbn.pack(side = LEFT)

        add_bookname_label = Label(self.platform, text = '書籍名稱：', height = 1)
        add_bookname_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_bookname = Entry(self.platform, width = 20)
        self.add_bookname.pack(side = LEFT)

        add_author_label = Label(self.platform, text = '作者：', height = 1)
        add_author_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_author = Entry(self.platform, width = 20)
        self.add_author.pack(side = LEFT)

        add_translator_label = Label(self.platform, text = '譯者：', height = 1)
        add_translator_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_translator = Entry(self.platform, width = 20)
        self.add_translator.pack(side = LEFT)

        add_publisher_label = Label(self.platform, text = '出版社：', height = 1)
        add_publisher_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_publisher = Entry(self.platform, width = 20)
        self.add_publisher.pack(side = LEFT)

        add_nums_label = Label(self.platform, text = '書本數量：', height = 1)
        add_nums_label.pack(side = LEFT, fill='x', expand=True)
        
        self.add_nums = Entry(self.platform, width = 20)
        self.add_nums.pack(side = LEFT)

        adding_button = Button(self.platform,
                          text = '新增',
                          width = 10,
                          height = 1,
                          bg = '#99CCFF',
                          fg = '#000000',
                          activebackground = '#FFFFFF',
                          activeforeground = '#000000',
                          command = self.add_books)
        adding_button.pack(side = LEFT)

        self.platform.mainloop()    
          

    def add_books(self):
        cursor = db.cursor()
        try:
            isbn = self.add_isbn.get()
            book_name = self.add_bookname.get()
            author = self.add_author.get()
            translator = self.add_translator.get()
            publisher = self.add_publisher.get()
            nums = self.add_nums.get()

            add_book = """INSERT INTO BOOK 
                            (ISBN, BOOK_NAME, AUTHOR,TRANSLATOR, PUBLISHER, NUMS)
                            VALUES (%s, %s, %s, %s, %s, %s)"""
            book_data = (isbn, book_name, author, translator, publisher, nums)
            cursor.execute(add_book, book_data)
            db.commit()
        except Exception as e:
            db.rollback()
            print("錯誤：", e)
        finally:
            cursor.close()
            self.add_isbn.delete(0, END)
            self.add_bookname.delete(0, END)
            self.add_author.delete(0, END)
            self.add_translator.delete(0, END)
            self.add_publisher.delete(0, END)
            self.add_nums.delete(0, END)

            
class System():
    
    def __init__(self):

        self.platform = Tk(className = '編輯資料庫')

        order_label = Label(self.platform,
                           text = '指令：',
                           height = 1)
        order_label.pack(side = LEFT,
                        fill = 'x',
                        expand = True)

        self.add_orders = Text(self.platform)
        self.add_orders.pack()

        order_button = Button(self.platform,
                          text = '輸出',
                          width = 10,
                          height = 1,
                          bg = '#99CCFF',
                          fg = '#000000',
                          activebackground = '#FFFFFF',
                          activeforeground = '#000000',
                          command = self.edit)
        order_button.pack(side = LEFT)

        self.platform.mainloop()

    def edit(self):
        order = self.add_orders.get("1.0", "end-1c")
        cursor = db.cursor()
        try:
            cursor.execute(f"""{order}""")
            db.commit()
        except Exception as e:
            db.rollback()
            print("資料庫編輯錯誤：", e)
        finally:
            cursor.close()
        
    def create_book_table(self):
        cursor = db.cursor()
        try:
            cursor.execute("""CREATE TABLE BOOK (
                    ISBN CHAR(20) NOT NULL,
                    BOOK_NAME CHAR(20) NOT NULL,
                    AUTHOR CHAR(20),
                    TRANSLATOR CHAR(20),
                    PUBLISHER CHAR(20),
                    NUMS INT(11) NOT NULL,
                    PRIMARY KEY (ISBN)
                    )DEFAULT CHARSET = utf8""")
            db.commit()
        except Exception as e:
            db.rollback()
            print("書籍資料庫建立錯誤：", e)
        finally:
            cursor.close()
            
    def create_user_table(self):
        cursor = db.cursor()
        try:
            cursor.execute("""CREATE TABLE USER (
                    USER_ID INT(11) NOT NULL AUTO_INCREMENT,
                    NAME CHAR(20) NOT NULL,
                    GENDER CHAR(20),
                    AGE CHAR(20),
                    PHONE CHAR(20),
                    PRIMARY KEY(USER_ID)
                    )DEFAULT CHARSET = utf8""")
            db.commit()
        except Exception as e:
            db.rollback()
            print("使用者資料庫建立錯誤：", e)
        finally:
            cursor.close()


#origin_table = System()
#origin_table.create_book_table()
#origin_table.create_user_table()  

Library = Start()
        
db.close()

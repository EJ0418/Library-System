import MySQLdb
db = MySQLdb.connect("localhost", "EJ", "********", "Library")

#表格建構系統
class Tables():
    def __init__(self, table_name):
        self.table = table_name

    def create_book_table(self):
        self.cursor = db.cursor()
        try:
            self.cursor.execute(f"""CREATE TABLE {self.table} (
                    ID INT(11) NOT NULL AUTO_INCREMENT,
                    BOOK_NAME CHAR(20) NOT NULL,
                    AUTHOR CHAR(20),
                    PUBLISHER CHAR(20),
                    NUMS INT(11) NOT NULL,
                    PRIMARY KEY (ID)
                    )DEFAULT CHARSET = utf8""")
            db.commit()
        except:
            db.rollback()
        finally:
            self.cursor.close()
            
    def create_user_table(self):
        self.cursor = db.cursor()
        try:
            self.cursor.execute(f"""CREATE TABLE {self.table} (
                    USER_ID INT(11) NOT NULL AUTO_INCREMENT,
                    NAME CHAR(20) NOT NULL,
                    AGE CHAR(20),
                    PHONE INT(11),
                    PRIMARY KEY(USER_ID)
                    )DEFAULT CHARSET = utf8""")
            db.commit()
        except:
            db.rollback()
        finally:
            self.cursor.close()
            
    def create_new_table(self, input_order):
        self.order = input_order
        self.cursor = db.cursor()
        try:
            self.cursor.execute(f"""{self.order}""")
            db.commit()
        except:
            db.rollback()
        finally:
            self.cursor.close()
            
    def drop_table(self):
        self.cursor.execute(f"DROP TABLE {self.table}")

book_table = Tables('BOOK_CHI')
book_table.create_book_table()

user_table = Tables('USER')
user_table.create_user_table()

create_new_table = input('要建立新表格嗎? y/n')
if create_new_table == 'y':
    new_table_name = input('要建立什麼表格：')
    new_table = Tables(str(new_table_name))
    order = input('指令：')
    new_table.create_new_table(order)
else:
    print('好的')

#讀者使用系統
class Users():
    def __init__(self, user_name):
        self.name = user_name
        self.book_shell = []
        
    def search_id(self, book_name):
        self.cursor = db.cursor()
        self.book = book_name
        try:
            self.cursor.execute(f"""SELECT ID 
                                    FROM BOOK 
                                    WHERE BOOK_NAME = '{self.book}'""")
            db.commit()
            result = cursor.fetchone()
            if result:
                self.book_id = result[0]
        except:
            db.rollback()
        finally:
            self.cursor.close()
        
    def borrow_books(self):
        self.cursor = db.cursor()
        try:
            self.cursor.execute(f"""UPDATE BOOK 
                                    SET NUMS = NUMS - 1
                                    WHERE ID = '{self.book_id}'""")
            db.commit()
            self.book_shell.append(book_name)
            print('書本：{}，借閱成功'.format(self.book))
        except:
            db.rollback()
        finally:
            self.cursor.close()
            
#enter_account = Users(str(input('登入 帳號名稱：'))) 

amy_account = Users('Amy')

search_book =  input('是否要查詢書籍? y/n')   
if search_book == 'y':
    the_book_name = input('書籍名稱：')
    amy_account.search_id(str(the_book_name))
else:
    print('不查詢書籍')

borrow_book = input('是否要借閱書籍? y/n')
if borrow_book == 'y':
    amy_account.borrow_books()

db.close()
